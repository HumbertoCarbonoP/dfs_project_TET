# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dfs_pb2 as dfs__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dfs_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NameNodeStub(object):
    """Servicios para el NameNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFile = channel.unary_unary(
                '/dfs.NameNode/UploadFile',
                request_serializer=dfs__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=dfs__pb2.UploadFileResponse.FromString,
                _registered_method=True)
        self.DownloadFile = channel.unary_unary(
                '/dfs.NameNode/DownloadFile',
                request_serializer=dfs__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=dfs__pb2.DownloadFileResponse.FromString,
                _registered_method=True)
        self.Ls = channel.unary_unary(
                '/dfs.NameNode/Ls',
                request_serializer=dfs__pb2.Empty.SerializeToString,
                response_deserializer=dfs__pb2.LsResponse.FromString,
                _registered_method=True)
        self.Cd = channel.unary_unary(
                '/dfs.NameNode/Cd',
                request_serializer=dfs__pb2.CdRequest.SerializeToString,
                response_deserializer=dfs__pb2.CdResponse.FromString,
                _registered_method=True)
        self.Mkdir = channel.unary_unary(
                '/dfs.NameNode/Mkdir',
                request_serializer=dfs__pb2.MkdirRequest.SerializeToString,
                response_deserializer=dfs__pb2.MkdirResponse.FromString,
                _registered_method=True)
        self.Rmdir = channel.unary_unary(
                '/dfs.NameNode/Rmdir',
                request_serializer=dfs__pb2.RmdirRequest.SerializeToString,
                response_deserializer=dfs__pb2.RmdirResponse.FromString,
                _registered_method=True)
        self.Rm = channel.unary_unary(
                '/dfs.NameNode/Rm',
                request_serializer=dfs__pb2.RmRequest.SerializeToString,
                response_deserializer=dfs__pb2.RmResponse.FromString,
                _registered_method=True)


class NameNodeServicer(object):
    """Servicios para el NameNode
    """

    def UploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rmdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=dfs__pb2.UploadFileRequest.FromString,
                    response_serializer=dfs__pb2.UploadFileResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=dfs__pb2.DownloadFileRequest.FromString,
                    response_serializer=dfs__pb2.DownloadFileResponse.SerializeToString,
            ),
            'Ls': grpc.unary_unary_rpc_method_handler(
                    servicer.Ls,
                    request_deserializer=dfs__pb2.Empty.FromString,
                    response_serializer=dfs__pb2.LsResponse.SerializeToString,
            ),
            'Cd': grpc.unary_unary_rpc_method_handler(
                    servicer.Cd,
                    request_deserializer=dfs__pb2.CdRequest.FromString,
                    response_serializer=dfs__pb2.CdResponse.SerializeToString,
            ),
            'Mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Mkdir,
                    request_deserializer=dfs__pb2.MkdirRequest.FromString,
                    response_serializer=dfs__pb2.MkdirResponse.SerializeToString,
            ),
            'Rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Rmdir,
                    request_deserializer=dfs__pb2.RmdirRequest.FromString,
                    response_serializer=dfs__pb2.RmdirResponse.SerializeToString,
            ),
            'Rm': grpc.unary_unary_rpc_method_handler(
                    servicer.Rm,
                    request_deserializer=dfs__pb2.RmRequest.FromString,
                    response_serializer=dfs__pb2.RmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.NameNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.NameNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NameNode(object):
    """Servicios para el NameNode
    """

    @staticmethod
    def UploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/UploadFile',
            dfs__pb2.UploadFileRequest.SerializeToString,
            dfs__pb2.UploadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/DownloadFile',
            dfs__pb2.DownloadFileRequest.SerializeToString,
            dfs__pb2.DownloadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/Ls',
            dfs__pb2.Empty.SerializeToString,
            dfs__pb2.LsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Cd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/Cd',
            dfs__pb2.CdRequest.SerializeToString,
            dfs__pb2.CdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/Mkdir',
            dfs__pb2.MkdirRequest.SerializeToString,
            dfs__pb2.MkdirResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/Rmdir',
            dfs__pb2.RmdirRequest.SerializeToString,
            dfs__pb2.RmdirResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNode/Rm',
            dfs__pb2.RmRequest.SerializeToString,
            dfs__pb2.RmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DataNodeStub(object):
    """Servicios para el DataNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreBlock = channel.unary_unary(
                '/dfs.DataNode/StoreBlock',
                request_serializer=dfs__pb2.StoreBlockRequest.SerializeToString,
                response_deserializer=dfs__pb2.StoreBlockResponse.FromString,
                _registered_method=True)
        self.GetBlock = channel.unary_unary(
                '/dfs.DataNode/GetBlock',
                request_serializer=dfs__pb2.GetBlockRequest.SerializeToString,
                response_deserializer=dfs__pb2.GetBlockResponse.FromString,
                _registered_method=True)


class DataNodeServicer(object):
    """Servicios para el DataNode
    """

    def StoreBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreBlock,
                    request_deserializer=dfs__pb2.StoreBlockRequest.FromString,
                    response_serializer=dfs__pb2.StoreBlockResponse.SerializeToString,
            ),
            'GetBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlock,
                    request_deserializer=dfs__pb2.GetBlockRequest.FromString,
                    response_serializer=dfs__pb2.GetBlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.DataNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.DataNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataNode(object):
    """Servicios para el DataNode
    """

    @staticmethod
    def StoreBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.DataNode/StoreBlock',
            dfs__pb2.StoreBlockRequest.SerializeToString,
            dfs__pb2.StoreBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.DataNode/GetBlock',
            dfs__pb2.GetBlockRequest.SerializeToString,
            dfs__pb2.GetBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
